@using Microsoft.AspNetCore.Components.Authorization
@inject UsersClient UsersClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@page "/"


<PageTitle>Login</PageTitle>
@if (userDetails is null)
{
    <h1><em>Loading...</em></h1>
}
else
{
    <div class="row d-flex justify-content-center align-items-center">
        <div class="col-md-4">

            <EditForm Model="userDetails" OnValidSubmit="HandleSubmitAsync" FormName="Home" Enhance>
                <DataAnnotationsValidator />

                <div class="form-group my-3">
                    <label for="exampleInputEmail1">Email address</label>
                    <InputText type="email" @bind-Value="userDetails.Email" class="form-control" placeholder="Enter email" />
                    <ValidationMessage For="@(() => userDetails.Email)" />
                    <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
                </div>

                <div class="form-group my-3">
                    <label for="exampleInputPassword1">Password</label>
                    <InputText type="password" @bind-Value="userDetails.Password" class="form-control" placeholder="Password" />
                    <ValidationMessage For="@(() => userDetails.Password)" />
                </div>

                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
            @if (!string.IsNullOrEmpty(loginError))
            {
                <div class="alert alert-danger" role="alert">
                    @loginError
                </div>
            }
        </div>
    </div>
}

@code{
    [SupplyParameterFromForm]
    private UserDetails? userDetails { get; set; }
    private string? loginError;

    protected override void OnInitialized()
    {
        userDetails = new UserDetails
            {
                Email = string.Empty,
                Password = string.Empty
            };

    }

    private async Task HandleSubmitAsync()
    {
        var response = await UsersClient.LoginUser(userDetails!);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/gamecatalog");
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            loginError = $"Login failed: {response.StatusCode} - {errorContent}";
        }
    }

}   
 
